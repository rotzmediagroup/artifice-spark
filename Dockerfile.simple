FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci || npm install

# Copy source code
COPY . .

# Build the frontend
ENV NODE_ENV=production
ENV VITE_API_URL=/api
RUN npm run build

# Production stage
FROM node:18-alpine

WORKDIR /app

# Install nginx, sqlite, and wget
RUN apk add --no-cache nginx sqlite wget

# Copy backend code
COPY backend/package*.json ./
RUN npm ci --only=production || npm install --production

COPY backend/ ./
COPY database/init-sqlite.sql ./database/

# Copy built frontend to nginx directory
COPY --from=builder /app/dist /var/www/html

# Create directories
RUN mkdir -p /app/uploads/reference-images /app/uploads/generated-content /var/log/nginx /run/nginx

# Create nginx configuration for single container
RUN cat > /etc/nginx/nginx.conf << 'EOF'
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 80;
        server_name localhost;

        root /var/www/html;
        index index.html;

        # Serve static files
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Proxy API requests to backend
        location /api/ {
            proxy_pass http://localhost:3001/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            client_max_body_size 50M;
        }

        # Proxy upload requests
        location /uploads/ {
            proxy_pass http://localhost:3001/uploads/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}
EOF

# Create startup script
RUN cat > /app/start.sh << 'EOF'
#!/bin/sh

# Initialize SQLite database
if [ ! -f /app/database.sqlite ]; then
    echo "Initializing SQLite database..."
    sqlite3 /app/database.sqlite < /app/database/init-sqlite.sql
fi

# Start nginx
nginx

# Start the API server
exec node server-sqlite.js
EOF

RUN chmod +x /app/start.sh

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

# Start both services
CMD ["/app/start.sh"]