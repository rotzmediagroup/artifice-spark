services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: rotz_image_generator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rotz_image_generator"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: rotz_image_generator
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      PORT: 8888
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-1035190682648-p60ao4phea2hbovo087bcao80741u10o.apps.googleusercontent.com}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-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}
    volumes:
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    ports:
      - "8888:8888"

volumes:
  postgres_data:
  uploads_data:

networks:
  app-network:
    driver: bridge