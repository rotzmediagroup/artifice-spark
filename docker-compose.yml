services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: rotz_image_generator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rotz_image_generator"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - app-network

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: rotz_image_generator
      DB_USER: postgres
      DB_PASSWORD: postgres123
      PORT: 3001
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      GOOGLE_CLIENT_ID: 1035190682648-p60ao4phea2hbovo087bcao80741u10o.apps.googleusercontent.com
      GOOGLE_CLIENT_SECRET: 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
    depends_on:
      - postgres
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - api
    environment:
      - API_URL=http://api:3001
    networks:
      - app-network

volumes:
  postgres_data:
  uploads:

networks:
  app-network:
    driver: bridge