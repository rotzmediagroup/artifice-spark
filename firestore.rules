rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is super admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'jerome@rotz.host';
    }
    
    // User profiles - Admin can read/write all, users can read their own
    match /userProfiles/{userId} {
      allow read, write: if isAdmin();
      allow read: if request.auth != null && request.auth.uid == userId;
      // Only admin can create/update credits field
      allow create: if request.auth != null && request.auth.uid == userId && 
                    (!('credits' in request.resource.data) || request.resource.data.credits == 0);
      // Allow users to update their own profile for credit deduction only
      allow update: if request.auth != null && request.auth.uid == userId &&
                    // Allow updating credits, totalCreditsUsed, and lastLogin for credit deduction
                    (request.resource.data.diff(resource.data).affectedKeys().hasAll(['credits', 'totalCreditsUsed', 'lastLogin']) ||
                     request.resource.data.diff(resource.data).affectedKeys().hasAll(['credits', 'totalCreditsUsed']) ||
                     request.resource.data.diff(resource.data).affectedKeys().hasAll(['lastLogin'])) &&
                    // Ensure credits can only be decreased (not increased)
                    (!('credits' in request.resource.data) || 
                     !('credits' in resource.data) ||
                     request.resource.data.credits <= resource.data.credits) &&
                    // Ensure totalCreditsUsed can only be increased
                    (!('totalCreditsUsed' in request.resource.data) || 
                     !('totalCreditsUsed' in resource.data) ||
                     request.resource.data.totalCreditsUsed >= resource.data.totalCreditsUsed);
    }
    
    // Credit transactions - Admin can read/write all, users can read their own
    match /creditTransactions/{transactionId} {
      allow read, write: if isAdmin();
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // Allow users to create transaction records for credit deduction only
      allow create: if request.auth != null && 
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.type == 'used' &&
                    request.resource.data.amount < 0 &&
                    request.resource.data.adminUserId == null;
    }
    
    // TOTP MFA settings - Admin can read all, users can read/write their own
    match /totpSettings/{userId} {
      allow read, write: if isAdmin();
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Ensure userId matches the document ID and authenticated user
      allow create: if request.auth != null && request.auth.uid == userId && 
                    request.resource.data.userId == userId;
    }
    
    // Users can only access their own data  
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Image history subcollection
      match /imageHistory/{imageId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && request.auth.uid == userId &&
                      // Ensure expiration is set to 14 days from creation
                      request.resource.data.expiresAt is timestamp &&
                      request.resource.data.extensionCount == 0;
        allow update: if request.auth != null && request.auth.uid == userId &&
                      // Allow updating liked status and extension fields
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['liked']) ||
                       // Allow extension updates only through Cloud Functions (validated server-side)
                       (request.resource.data.diff(resource.data).affectedKeys().hasAny(['expiresAt', 'extensionCount', 'lastExtendedAt']) &&
                        request.resource.data.extensionCount >= resource.data.extensionCount));
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // User presets subcollection
      match /presets/{presetId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User settings subcollection
      match /settings/{settingId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Test collections (for automated testing)
      match /test/{testId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Global connection test document (for connectivity testing)
    match /connection-test/{document} {
      allow read, write: if request.auth != null;
    }
  }
}