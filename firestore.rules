rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is super admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'jerome@rotz.host';
    }
    
    // User profiles - Admin can read/write all, users can read their own
    match /userProfiles/{userId} {
      allow read, write: if isAdmin();
      allow read: if request.auth != null && request.auth.uid == userId;
      // Only admin can create/update credits field
      allow create: if request.auth != null && request.auth.uid == userId && 
                    (!('credits' in request.resource.data) || request.resource.data.credits == 0);
    }
    
    // Credit transactions - Admin can read/write all, users can read their own
    match /creditTransactions/{transactionId} {
      allow read, write: if isAdmin();
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Users can only access their own data  
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Image history subcollection
      match /imageHistory/{imageId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User presets subcollection
      match /presets/{presetId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User settings subcollection
      match /settings/{settingId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Test collections (for automated testing)
      match /test/{testId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Global connection test document (for connectivity testing)
    match /connection-test/{document} {
      allow read, write: if request.auth != null;
    }
  }
}